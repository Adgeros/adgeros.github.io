[{"title":"vue2移动端单页脚手架","url":"/2017/12/29/vue2移动端单页脚手架/","content":"### adger-vue-scaffold\n\n> 基于vue-cli改造的脚手架，添加flexable，添加首页tab\n> [github](https://github.com/Adgeros/adger-vue-scaffold)\n\n### Build Setup\n\n``` bash\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# build for production with minification\nnpm run build\n\n# build for production and view the bundle analyzer report\nnpm run build --report\n\n# run unit tests\nnpm run unit\n\n# run e2e tests\nnpm run e2e\n\n# run all tests\nnpm test\n```\n\nFor a detailed explanation on how things work, check out the [guide](http://vuejs-templates.github.io/webpack/) and [docs for vue-loader](http://vuejs.github.io/vue-loader).","tags":["vue"]},{"title":"特殊的5天","url":"/2017/08/22/特殊的5天/","content":"\n你走已经第三天，但是仿佛并没有走远\n","tags":["旅游"]},{"title":"GIT协同开发","url":"/2017/08/20/GIT协同开发/","content":"\n\n##### 用了一段时间github,一直想用时间来对git的使用来做一段笔记，前段时间比较忙，现在沉下心来学习也是极好的。\n很多项目开发会采用git这一优秀的分布式版本管理工具来进行项目版本管理。因为git的使用非常灵活，所以在实际操作中会有许多不同的工作流程。不同团队对于不同项目会有不同的协作方式。掌握git版本管理开发，对以后的学习和开发都有很多好处。\n\n##### 首先基本名词要懂：\n\n> 仓库（Repository）、分支（branch）、工作流（workflow）\n\n##### 仓库（Repository）\n\n在项目的开始到结束，我们会有两种仓库，一种是源仓库（origin），一种是开发者仓库。\n\n###### 源仓库（origin）的有两个作用：\n\n- 汇总参与该项目的各个开发者的代码\n- 存放趋于稳定和可发布的代码\n\n> 源仓库应该是受保护的，开发者不应该直接对其进行开发工作。只有项目管理者（通常是项目发起人）能对其进行较高权限的操作。\n\n###### 开发者仓库：\n> 任何开发者都不会对源仓库进行直接的操作，源仓库建立以后，每个开发者需要做的事情就是把源仓库的“复制”一份，作为自己日常开发的仓库。这个复制，也就是github上面的fork。\n\n> 每个开发者所fork的仓库是完全独立的，互不干扰，甚至与源仓库都无关。  每个开发者仓库相当于一个源仓库实体的影像，  开发者在这个影像中进行编码， 提交到自己的仓库中，这样就可以轻易地实现团队成员之间的并行开发工作。  而开发工作完成以后,   开发者可以向源仓库发送pull request，请求管理员把自己的代码合并到源仓库中，这样就实现了分布式开发工作，和最后的集中式的管理。\n\n \n\n##### 分支（branch） \n\n在git中，分支操作则是每个开发人员日常工作流。利用git的分支，可以非常方便地进行开发和测试。\n\n我们为git定下一种分支模型，在这种模型中，分支有两类，五种：\n\n######  永久性分支\n\n- master branch：主分支\n\n- develop branch：开发分支\n\n###### 临时性分支\n\n- feature branch：功能分支\n\n- release branch：预发布分支\n\n- hotfix branch：bug修复分支\n\n> master：主分支从项目一开始便存在，它用于存放经过测试，已经完全稳定代码；在项目开发以后的任何时刻当中，master存放的代码应该是可作为产品供用户使用的代码。每一次master更新的时候都应该用git打上tag，说明你的产品有新版本发布了。\n\n> develop：开发分支，一开始从master分支中分离出来，用于开发者存放基本稳定代码。开发者把功能做好以后，是存放到自己的develop中，当测试完以后，可以向管理者发起一个pull request，请求把自己仓库的develop分支合并到源仓库的develop中。\n\n> 归纳：所有开发者开发好的功能会在源仓库的develop分支中进行汇总，当develop中的代码经过不断的测试，已经逐渐趋于稳定了，接近产品目标了。这时候，我们就可以把develop分支合并到master分支中，发布一个新版本。\n\n\n> feature：功能性分支，是用于开发项目的功能的分支，是开发者主要战斗阵地。开发者在本地仓库从develop分支分出功能分支，在该分支上进行功能的开发，开发完成以后再合并到develop分支上，这时候功能性分支已经完成任务，可以删除。功能性分支的命名一般为feature-*，*为需要开发的功能的名称。\n\n> release：预发布分支，当产品即将发布的时候，要进行最后的调整和测试，这时候就可以分出一个预发布分支，进行最后的bug fix。测试完全以后，发布新版本，就可以把预发布分支删除。预发布分支一般命名为release-*。\n\n> hotfix：修复bug分支，当产品已经发布了，突然出现了重大的bug。这时候就要新建一个hotfix分支，继续紧急的bug修复工作，当bug修复完以后，把该分支合并到master和develop以后，就可以把该分支删除。修复bug分支命名一般为hotfix-*。\n\n \n\n> 示范：举一个例子，A正在做一个团队项目，已经把源仓库fork了，并且clone到了本地。现在要开发网站的某个功能。A在本地仓库中可以这样做：\n\n##### 切换到develop分支 ：``` git checkout develop```\n\n##### 分出一个功能性分支： ```git checkout -b feature-discuss```\n\n在功能性分支上进行开发工作，多次commit，测试以后...\n\n##### 把做好的功能合并到develop中：\n\n```\ngit checkout develop    # 回到develop分支    \n\ngit merge--no-ff feature-discuss# 把做好的功能合并到develop中    \n\ngit branch -d feature-discuss    # 删除功能性分支    \n\ngit push origin develop    # 把develop提交到自己的远程仓库中\n```\n\n \n\n##### 工作流（workflow）\n\n- 源仓库的构建，创建一个项目，初始化了两个永久性分支master和develop.\n\n- 开发者fork源仓库\n\n- 把自己开发者仓库clone到本地，命令：git clone\n\n- 构建功能分支进行开发，完成后合并到自己的develop分支。\n\n##### 进入仓库中，按照前面说所的构建功能分支的步骤，构建功能分支进行开发、合并，假设我现在要开发一个“讨论”功能：\n```\ngit checkout develop    # 切换到`develop`分支   \n\n git checkout -b feature-discuss    # 分出一个功能性分支    \n\ntouch discuss.js    # 假装discuss.js就是我们要开发的功能    \n\ngit add .    \n\ngit commit -m 'finish discuss feature'# 提交更改    \n\ngit checkout develop    # 回到develop分支    \n\ngit merge--no-ff feature-discuss# 把做好的功能合并到develop中    \n\ngit branch -d feature-discuss    # 删除功能性分支    \n\ngit push origin develop    # 把develop提交到自己的远程仓库中\n```\n\n - 向管理员提交pull request。经过测试以后，觉得没问题，就可以请求管理员把自己仓库的develop分支合并到源仓库的develop分支中，这就是传说中的pull request。\n\n##### 管理员测试、合并\n\n对代码进行review，github提供非常强大的代码review功能\n\n在本地测试新建一个测试分支，测试pull request的代码\n```\ngit checkout develop    # 进入本地的develop分支    \n\ngit checkout -b livoras-develop    \n```\n\n##### 从develop分支中分出一个叫livoras-develop的测试分支测试pull request代码    \n\ngit pull https://github.com/livoras/git-demo.git develop    \n\n##### 把pull request的代码pull到测试分支中，进行测试\n\n##### 判断是否同意合并到源仓库的develop中，如果经过测试没问题，可以把我的代码合并到源仓库的develop中：\n```\ngit checkout develop    \n\ngit merge--no-ff livoras-develop    \n\ngit push origin develop\n```","tags":["github"]},{"title":"CentOS7安装和配置vsftpd","url":"/2017/07/22/CentOS7安装和配置vsftpd/","content":"\n## 安装vsftpd\n``` bash\n#安装vsftpd\n$ yum install -y vsftpd\n#设置开机启动\n$ systemctl enable vsftpd.service \n# 重启\n$ service vsftpd restart\n# 查看vsftpd服务的状态\n$ systemctl status vsftpd.service\n```\n### 配置vsftpd.conf\n\n``` bash\n#备份配置文件 \n$ cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak\n\n#执行以下命令\n$ sed -i \"s/anonymous_enable=YES/anonymous_enable=NO/g\" '/etc/vsftpd/vsftpd.conf'\n\n$ sed -i \"s/#anon_upload_enable=YES/anon_upload_enable=NO/g\" '/etc/vsftpd/vsftpd.conf'\n\n$ sed -i \"s/#anon_mkdir_write_enable=YES/anon_mkdir_write_enable=YES/g\" '/etc/vsftpd/vsftpd.conf'\n\n$ sed -i \"s/#chown_uploads=YES/chown_uploads=NO/g\" '/etc/vsftpd/vsftpd.conf'\n\n$ sed -i \"s/#async_abor_enable=YES/async_abor_enable=YES/g\" '/etc/vsftpd/vsftpd.conf'\n\n$ sed -i \"s/#ascii_upload_enable=YES/ascii_upload_enable=YES/g\" '/etc/vsftpd/vsftpd.conf'\n\n$ sed -i \"s/#ascii_download_enable=YES/ascii_download_enable=YES/g\" '/etc/vsftpd/vsftpd.conf'\n\n$ sed -i \"s/#ftpd_banner=Welcome to blah FTP service./ftpd_banner=Welcome to FTP service./g\" '/etc/vsftpd/vsftpd.conf'\n\n#添加下列内容到vsftpd.conf末尾（原本有几个配置的最下面）\nuse_localtime=YES\nlisten_port=21\nchroot_local_user=YES\nidle_session_timeout=300\nguest_enable=YES\nguest_username=vsftpd\nuser_config_dir=/etc/vsftpd/vconf\ndata_connection_timeout=1\nvirtual_use_local_privs=YES\npasv_min_port=10060\npasv_max_port=10090\naccept_timeout=5\nconnect_timeout=1\n```\n\n### 建立用户文件\n\n``` bash\n#第一行用户名，第二行密码，不能使用root为用户名\n$ vi /etc/vsftpd/virtusers\nadger\n123456\n```\n\n### 生成用户数据文件\n\n``` bash\n$ db_load -T -t hash -f /etc/vsftpd/virtusers /etc/vsftpd/virtusers.db\n#设定PAM验证文件，并指定对虚拟用户数据库文件进行读取\n$ chmod 600 /etc/vsftpd/virtusers.db \n```\n\n### 修改/etc/pam.d/vsftpd文件\n\n``` bash\n# 修改前先备份 \n\n$ cp /etc/pam.d/vsftpd /etc/pam.d/vsftpd.bak\n\n# 将auth及account的所有配置行均注释掉\n$ vi /etc/pam.d/vsftpd\n\nauth sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/virtusers\n\naccount sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/virtusers\n\n# 如果系统为32位，上面改为lib\n```\n\n### 新建系统用户vsftpd，用户目录为/home/vsftpd\n``` bash\n#用户登录终端设为/bin/false(即：使之不能登录系统)\n$ useradd vsftpd -d /home/vsftpd -s /bin/false\n$ chown -R vsftpd:vsftpd /home/vsftpd\n```\n\n### 建立虚拟用户个人配置文件\n``` bash\n$ mkdir /etc/vsftpd/vconf\n$ cd /etc/vsftpd/vconf\n\n#这里建立两个虚拟用户配合文件\n$ touch adger\n\n#建立用户根目录\n$ mkdir -p /home/vsftpd/adger/\n\n#编辑chris用户配置文件，内容如下，其他用户类似\n$ vi adger\n\n# adger目录不允许可写，不然无法连接ftp\nlocal_root=/home/vsftpd/adger/\nwrite_enable=YES\nanon_world_readable_only=NO\nanon_upload_enable=YES\nanon_mkdir_write_enable=YES\nanon_other_write_enable=YES\n```\n\n### 设置目录权限\n``` bash\n# chroot_local_user 属性以后,必须保证ftp根目录不可写,这样对于ftp根直接为网站根目录的用户不方便,所以建议假如ftp根目录是/home/${adger},则将访问权限改写如下\n$ chmod a-w /home/adger\n# 新建上传文件夹\n$ mkdir /home/vsftpd/adger/resource\n$ chmod -R 777 /home/vsftpd/adger/resource\n```\n\n### 防火墙设置\n``` bash\n$ vi /etc/sysconfig/iptables\n#编辑iptables文件，添加如下内容，开启21端口\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPT\n```\n\n### 重启vsftpd服务器\n``` bash\n$ service vsftpd restart\n```\n\n### 客户端连接\n\n","tags":["Linux"]}]